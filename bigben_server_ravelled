#!/usr/bin/python3
#+
# DBussy example -- a server which chimes every “hour”. For demonstration
# purposes, an “hour” goes by much faster than real time. The server
# sends a periodic chime signal on the session bus, and also responds
# to requests for its idea of the current time, and to delay the caller
# until the next chime.
#
# This version uses the ravel higher-level API.
#
# Copyright 2017 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import math
import time
import asyncio
import dbussy as dbus
from dbussy import \
    DBUS
import ravel

my_bus_name = "com.example.bigben"
my_path_name = "/com/example/bigben"
my_iface_name = "com.example.bigben"
chime_signal_name = "chime"

loop = asyncio.get_event_loop()

#+
# Time task
#-

nr_hours = 12
seconds_per_hour = 15 # do you dare set this to the right value?
nr_chimes = 0 # to begin with
awaiting_chime = None

async def chimer() :
    global nr_chimes, awaiting_chime
    first = True
    while True :
        hour = time.time() % (nr_hours * seconds_per_hour) / seconds_per_hour
        nr_chimes = math.floor(hour)
        if nr_chimes == 0 :
            nr_chimes = nr_hours
        #end if
        if not first :
            bus.send_signal \
              (
                path = my_path_name,
                interface = my_iface_name,
                name = "chime",
                args = [["BONG!"] * nr_chimes]
              )
            if awaiting_chime != None and not awaiting_chime.done() :
                awaiting_chime.set_result(None)
                awaiting_chime = None
            #end if
        #end if
        delay = (math.ceil(hour) - hour) * seconds_per_hour
        if not first and delay == 0 :
            delay = seconds_per_hour
        #end if
        first = False
        await asyncio.sleep(delay)
    #end while
#end chimer

#+
# Interface
#-

@ravel.interface(ravel.INTERFACE.SERVER, name = my_iface_name)
class BigBen :

    @ravel.method \
      (
        name = "whats_the_time",
        in_signature = "",
        out_signature = "s"
      )
    def handle_whats_the_time(self) :
        return \
          (
            [
                "%s o’clock"
            %
                (
                    "?",
                    "one",
                    "two",
                    "three",
                    "four",
                    "five",
                    "six",
                    "seven",
                    "eight",
                    "nine",
                    "ten",
                    "eleven",
                    "twelve",
                )[nr_chimes]
            ]
          )
    #end handle_whats_the_time

    @ravel.method \
      (
        name = "await_chime",
        in_signature = "",
        out_signature = ""
      )
    async def handle_await_chime(self) :
        global awaiting_chime
        if awaiting_chime == None or awaiting_chime.done() :
            awaiting_chime = loop.create_future()
        #end if
        await awaiting_chime
        return \
            []
    #end handle_await_chime

    @ravel.signal(name = "chime", in_signature = "as")
    def chime_dummy(self) : pass

    @ravel.method \
      (
        name = "stop",
        in_signature = "",
        out_signature = "",
        connection_keyword = "conn",
        message_keyword = "message",
      )
    def handle_stop(self, conn, message) :
        loop.stop()
        conn.send(message.new_method_return())
    #end handle_stop

#end BigBen

#+
# Mainline
#-

bus = ravel.session_bus()
bus.attach_asyncio(loop)
bus.request_name(bus_name = my_bus_name, flags = DBUS.NAME_FLAG_DO_NOT_QUEUE)
bus.register \
  (
    path = "/",
    fallback = True,
    interface = BigBen()
  )
main_task = loop.create_task(chimer())
  # need to keep a reference
try :
    loop.run_forever()
except KeyboardInterrupt :
    # is there an easier way of cleaning up than this?
    for task in \
        (lambda : asyncio.Task.all_tasks(loop), lambda : asyncio.all_tasks(loop)) \
            [hasattr(asyncio, "all_tasks")]() \
    :
        task.cancel()
        try :
            loop.run_until_complete(task)
        except asyncio.CancelledError :
            pass
        #end try
    #end for
    print() # avoid terminal prompt appearing after ^C
#end try
bus = None
