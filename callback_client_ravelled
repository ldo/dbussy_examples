#!/usr/bin/python3
#+
# DBussy example -- a client for exercising the callback_server.
# By default this sends a valid “call_me_back” request to the
# callback_server, but this can be modified by setting appropriate
# environment variables. In particular, try passing syntactically
# invalid paths or interface or method names, and the server will
# send back an appropriate error message.
#
# Copyright 2021 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import asyncio
import dbussy as dbus
from dbussy import \
    DBUS
import ravel

server_bus_name = "com.example.callback_server"
server_path_name = "/"
server_iface_name = "com.example.callback_server"
server_method_name = "call_me_back"

my_bus_name = "com.example.callback_client"
my_path_name = "/"
my_iface_name = "com.example.callback_client"
my_method_name = "call_me"

loop = asyncio.get_event_loop()

#+
# Callback Interface
#-

@ravel.interface(ravel.INTERFACE.SERVER, name = my_iface_name)
class CallbackHandler :

    @ravel.method \
      (
        name = my_method_name,
        in_signature = "",
        path_keyword = "path",
        out_signature = "",
      )
    async def i_got_called(self, path) :
        sys.stdout.write("I got called, object path = %s\n" % path)
        await asyncio.sleep(reply_delay)
          # User can cause reply to take too long, or hit CTRL/C
          # during this sleep to abort, and see how server responds.
        return \
            []
    #end i_got_called

#end CallbackHandler

#+
# Mainline
#-

use_obj_path = os.getenv("OBJ_PATH", "/")
use_iface_name = os.getenv("IFACE_NAME", my_iface_name)
use_method_name = os.getenv("METHOD_NAME", my_method_name)
reply_delay = os.getenv("REPLY_DELAY")
if reply_delay != None :
    reply_delay = int(reply_delay)
else :
    reply_delay = 0
#end if

bus = ravel.session_bus()
bus.attach_asyncio(loop)
bus.register \
  (
    path = "/",
    fallback = True,
    interface = CallbackHandler()
  )

async def mainline() :
    request = dbus.Message.new_method_call \
      (
        destination = server_bus_name,
        path = server_path_name,
        iface = server_iface_name,
        method = server_method_name,
      )
    request.append_objects("sss", use_obj_path, use_iface_name, use_method_name)
    reply = await bus.connection.send_await_reply(request)
    sys.stderr.write("reply.type = %s\n" % dbus.Message.type_to_string(reply.type))
    if reply.type == DBUS.MESSAGE_TYPE_ERROR :
        sys.stderr.write(" error name = %s, args = %s\n" % (reply.error_name, repr(reply.all_objects)))
    #end if
#end mainline

try :
    loop.run_until_complete(mainline())
except KeyboardInterrupt :
    # is there an easier way of cleaning up than this?
    for task in \
        (lambda : asyncio.Task.all_tasks(loop), lambda : asyncio.all_tasks(loop)) \
            [hasattr(asyncio, "all_tasks")]() \
    :
        task.cancel()
        try :
            loop.run_until_complete(task)
        except asyncio.CancelledError :
            pass
        #end try
    #end for
    print() # avoid terminal prompt appearing after ^C
#end try
bus = None
