#!/usr/bin/python3
#+
# DBussy example -- make recursive Introspect queries to all possible
# paths at a specified bus name. This version uses asyncio. Invoke
# this script as follows:
#
#    introspect_all [--implementing-interface=«interface»] [--list-interfaces] \
#        «bus» «bus-name»
#
# where «bus» is either “session” or “system”, indicating which bus to
# do the query on, and “bus-name” is the name of the service on the
# bus to query.
#
# In the absence of either option, the response is an XML string in
# the usual introspection format, indicating the protocol for
# communicating with the entire object tree. If the
# --implementing-interface option is present, then the output is the
# list of object paths which were reported to implement the named
# «interface». Otherwise, if --list-interfaces was specified, then the
# output is just the list of names of interfaces seen.
#
# Copyright 2017 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import ctypes as ct
import fcntl
import termios
import asyncio
import getopt
import dbussy as dbus
from dbussy import \
    DBUS

#+
# Useful stuff
#-

def get_terminal_window_size() :
    "returns (cols, rows) for the terminal if this can be determined, else (None, None)."

    class winsize(ct.Structure) :
        _fields_ = \
            [
                ("ws_row", ct.c_ushort),
                ("ws_col", ct.c_ushort),
                ("ws_ypixel", ct.c_ushort), # unused
                ("ws_xpixel", ct.c_ushort), # unused
            ]
    #end winsize

#begin get_terminal_window_size
    result = (None, None) # to begin with
    tty_fileno = 2 # sys.stderr.fileno()
    if os.isatty(tty_fileno) :
        size_buf = winsize()
        fcntl.ioctl(tty_fileno, termios.TIOCGWINSZ, size_buf)
        result = (size_buf.ws_col, size_buf.ws_row)
    #end if
    return \
        result
#end get_terminal_window_size

#+
# Mainline
#-

loop = asyncio.get_event_loop()

full_node_names = False
list_interfaces = False
want_interface = None
verbose = True
skip_standard = False
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "qs",
    ["full-node-names", "implementing-interface=", "list-interfaces", "quiet", "skip-standard"]
  )
for keyword, value in opts :
    if keyword == "--full-node-names" :
        full_node_names = True
    elif keyword == "--implementing-interface" :
        want_interface = value
    elif keyword == "--list-interfaces" :
        list_interfaces = True
    elif keyword == "-q" or keyword == "--quiet" :
        verbose = False
    elif keyword == "-s" or keyword == "--skip-standard" :
        skip_standard = True
    #end if
#end if
if list_interfaces and want_interface != None :
    raise getopt.GetoptError \
      (
        "specify either --implementing-interface or --list-interfaces, not both"
      )
#end if
if len(args) != 2 :
    raise getopt.GetoptError("usage: %s session|system «bus-name»" % sys.argv[0])
#end if
which_bus, destination = args

conn = dbus.Connection.bus_get \
  (
    {"session" : DBUS.BUS_SESSION, "system" : DBUS.BUS_SYSTEM}[which_bus.lower()],
    private = False
  )
conn.attach_asyncio(loop)

interfaces_seen = set()
if skip_standard :
    interfaces_seen |= dbus.standard_interfaces.keys()
#end if
nr_objects = 0
current_path = None

async def introspect_path(path) :
    "introspects the specified path."
    global current_path, nr_objects
    current_path = dbus.unsplit_path(path)
    nr_objects += 1
    request = dbus.Message.new_method_call \
      (
        destination = destination,
        path = dbus.unsplit_path(path),
        iface = DBUS.INTERFACE_INTROSPECTABLE,
        method = "Introspect"
      )
    reply = await conn.send_await_reply(request)
    result = dbus.Introspection.parse(reply.expect_return_objects("s")[0])
    for i in range(len(result.interfaces)) :
        interface = result.interfaces[i]
        if interface.name in interfaces_seen :
            result.interfaces[i] = dbus.Introspection.StubInterface(name = interface.name)
        else :
            interfaces_seen.add(interface.name)
        #end if
    #end for
    for i in range(len(result.nodes)) :
        node = result.nodes[i]
        expanded = await introspect_path(path + [node.name])
        if full_node_names :
            node_name = dbus.unsplit_path(path + [node.name])
        else :
            node_name = node.name
        #end if
        result.nodes[i] = dbus.Introspection.Node \
          (
            name = node_name,
            interfaces = expanded.interfaces,
            nodes = expanded.nodes,
            annotations = expanded.annotations
          )
    #end for
    return \
        result
#end introspect_path

async def show_progress() :
    "keeps the user apprised of current progress."
    did_progress = False
    esc = chr(27)
    clear_line = esc + "[2K"
    cursor_left = esc + "[%dD" % line_length
    prefix = "doing: "
    try :
        while True :
            await asyncio.sleep(1 / 4)
            msg = "%d: %s%s" % (nr_objects, prefix, current_path)
            msg = msg[:line_length]
            sys.stderr.write("%s%s%s" % (clear_line, msg, cursor_left))
            sys.stderr.flush()
            did_progress = True
        #end while
    except asyncio.CancelledError :
        if did_progress :
            sys.stderr.write("%s%d done.\n" % (clear_line, nr_objects))
        #end if
    #end try
#end show_progress

def show_matching_interface(out, parent, introspection) :
    if want_interface in introspection.interfaces_by_name :
        out.write("%s\n" % dbus.unsplit_path(parent))
    #end if
    for child in introspection.nodes :
        show_matching_interface(out, parent + [child.name], child)
    #end for
#end show_matching_interface

if verbose :
    line_length = get_terminal_window_size()[0]
else :
    line_length = None
#end if
if line_length != None :
    progress_task = loop.create_task(show_progress())
else :
    progress_task = None
#end if
result = loop.run_until_complete(introspect_path([]))
result.name = "/"
if progress_task != None :
    progress_task.cancel()
    try :
        loop.run_until_complete(progress_task)
    except asyncio.CancelledError :
        pass
    #end try
#end if
if list_interfaces :
    for interface in sorted(interfaces_seen) :
        sys.stdout.write(interface + "\n")
    #end for
elif want_interface != None :
    show_matching_interface(sys.stdout, [], result)
else :
    sys.stdout.write(result.unparse())
#end if
