#!/usr/bin/python3
#+
# DBussy example -- make an Introspect query to a specified bus object.
# This version uses the high-level Ravel API with thread-blocking.
# Invoke this script as follows:
#
#    introspect_ravelled_blocking «bus» «bus-name» «obj-path»
#
# where «bus» is either “session” or “system”, indicating which bus
# to do the query on, “bus-name” is the name of the service on the
# bus to query, and «obj-path» is the path of the object to query.
# The response should be an XML string in the usual introspection
# format, indicating the protocol for communicating with the
# specified object.
#
# Copyright 2017 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import getopt
import dbussy as dbus
from dbussy import \
    DBUS
import ravel

if len(sys.argv) != 4 :
    raise getopt.GetoptError("usage: %s session|system «bus-name» «obj-path»" % sys.argv[0])
#end if

bus = {"session" : ravel.session_bus, "system" : ravel.system_bus}[sys.argv[1].lower()]()
reply = ravel.CInterface \
  (
    object = bus.get_object(sys.argv[2], sys.argv[3]),
    name = DBUS.INTERFACE_INTROSPECTABLE
  ).Introspect()
sys.stdout.write(reply)
