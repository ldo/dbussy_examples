#!/usr/bin/python3
#+
# DBussy example -- a server which accepts requests from clients to
# call an arbitrary method of theirs. The client calls my
# “call_me_back” method, passing it the object path, interface name
# and method name to call. If these are not syntactically valid, then
# an error return is generated. Otherwise the appropriate method call
# is sent. But note there is no check that the path and interface and
# method names are actually recognized by the client.
#
# Copyright 2021 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import asyncio
import dbussy as dbus
from dbussy import \
    DBUS
import ravel

my_bus_name = "com.example.callback_server"
my_path_name = "/"
my_iface_name = "com.example.callback_server"

loop = asyncio.get_event_loop()

#+
# Interface
#-

@ravel.interface(ravel.INTERFACE.SERVER, name = my_iface_name)
class CallbackServer :

    @ravel.method \
      (
        name = "call_me_back",
        in_signature = "sss",
          # not “oss” to deliberately allow client to pass arbitrary paths,
          # which I validate myself
        arg_keys = ("call_path", "call_interface", "call_method"),
        result_keyword = "result_ignore",
        out_signature = "",
        connection_keyword = "conn",
        message_keyword = "message",
      )
    async def handle_callback(self, conn, message, call_path, call_interface, call_method, result_ignore) :
        validfail = dbus.Error.init()
        for validate, arg in \
            (
                (dbus.validate_path, call_path),
                (dbus.validate_interface, call_interface),
                (dbus.validate_member, call_method),
            ) \
        :
            if not validate(arg, validfail) :
                assert validfail.is_set
                break
            #end if
        #end for
        if validfail.is_set :
            result = dbus.Error()
            result.set(validfail.name, validfail.message)
        else :
            call = dbus.Message.new_method_call \
              (
                destination = message.sender,
                path = call_path,
                iface = call_interface,
                method = call_method
              )
            sys.stderr.write("call to %s path %s interface %s method %s\n" % (message.sender, call_path, call_interface, call_method))
            reply = await conn.send_await_reply(call)
            sys.stderr.write("reply from %s type %s" % (message.sender, dbus.Message.type_to_string(reply.type)))
            if reply.type == DBUS.MESSAGE_TYPE_ERROR :
                sys.stderr.write(", error name = %s, args = %s\n" % (reply.error_name, repr(reply.all_objects)))
            #end if
            sys.stderr.write("\n")
            result = []
        #end if
        return \
            result
    #end handle_callback

#end CallbackServer

#+
# Mainline
#-

bus = ravel.session_bus()
bus.attach_asyncio(loop)
bus.request_name(bus_name = my_bus_name, flags = DBUS.NAME_FLAG_DO_NOT_QUEUE)
bus.register \
  (
    path = "/",
    fallback = True,
    interface = CallbackServer()
  )

try :
    loop.run_forever()
except KeyboardInterrupt :
    # is there an easier way of cleaning up than this?
    for task in \
        (lambda : asyncio.Task.all_tasks(loop), lambda : asyncio.all_tasks(loop)) \
            [hasattr(asyncio, "all_tasks")]() \
    :
        task.cancel()
        try :
            loop.run_until_complete(task)
        except asyncio.CancelledError :
            pass
        #end try
    #end for
    print() # avoid terminal prompt appearing after ^C
#end try
bus = None
