#!/usr/bin/python3
#+
# DBussy example -- make a method call using an interface at an
# object path from a bus peer. Invoke this script as follows:
#
#     call [--json] [--signature=«signature»] session|system \
#         «bus_name» «path» «interface» «method» [«args»...]
#
# where «bus_name», «path», «interface» and «method» are the usual
# parameters for targeting the method-call message, and the rest of
# the command-line arguments are arguments to the method call. These
# are interpreted as literal strings, unless --json is specified,
# in which case they are parsed as JSON object definitions. The
# argument types must match the method signature (obtained via
# introspection if not specified as «signature»), otherwise an
# error is raised.
#
# Example: bring up a desktop notification for 5000 milliseconds
# (5 seconds):
#
#     call --json session org.freedesktop.Notifications /org/freedesktop/Notifications \
#         org.freedesktop.Notifications Notify '"Test"' 1 '""' '"Greetings"' \
#         '"Hello Freedesktop World!"' '[]' '{}' 5000
#
# Copyright 2017-2019 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import json
import asyncio
import getopt
import dbussy as dbus
from dbussy import \
    DBUS

loop = asyncio.get_event_loop()

#+
# Mainline
#-

use_json = False
signature = None
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["json", "signature="]
  )
for keyword, value in opts :
    if keyword == "--json" :
        use_json = True
    elif keyword == "--signature" :
        signature = dbus.unparse_signature(value)
    #end if
#end for

if len(args) < 5 :
    raise getopt.GetoptError \
      (
        "usage: %s session|system «bus-name» «path» «interface» «method» [«args»...]" % sys.argv[0]
      )
#end if
which_bus, destination, object_path, interface_name, method_name = args[:5]
args = args[5:]
dbus.validate_bus_name(destination)
dbus.validate_path(object_path)
dbus.validate_interface(interface_name)
dbus.validate_member(method_name)

conn = loop.run_until_complete \
  (
    dbus.Connection.bus_get_async
      (
        {"session" : DBUS.BUS_SESSION, "system" : DBUS.BUS_SYSTEM}[which_bus.lower()],
        private = False
      )
  )

if signature == None :
    message = dbus.Message.new_method_call \
      (
        destination = destination,
        path = object_path,
        iface = DBUS.INTERFACE_INTROSPECTABLE,
        method = "Introspect"
      )
    reply = loop.run_until_complete \
      (
        conn.send_await_reply(message)
      )
    introspection = dbus.Introspection.parse(reply.expect_return_objects("s")[0])
    interfaces = introspection.interfaces_by_name
    if interface_name not in interfaces :
        raise getopt.GetoptError \
          (
                "bus peer “%s” object “%s” does not understand interface “%s”"
            %
                (destination, object_path, interface_name)
          )
    #end if
    interface = interfaces[interface_name]
    methods = interface.methods_by_name
    if method_name not in methods :
        raise getopt.GetoptError \
          (
                "interface “%s” does not implement method “%s”"
            %
                (interface_name, method_name)
          )
    #end if
    method = methods[method_name]
    signature = method.in_signature
#end if

message = dbus.Message.new_method_call \
  (
    destination = destination,
    path = object_path,
    iface = interface_name,
    method = method_name
  )
sig = dbus.parse_signature(signature)
if len(sig) != len(args) :
    raise TypeError("wrong nr args, need %d, got %d" % (len(sig), len(args)))
#end if
if not use_json :
    if (
        all
          (
            s in
                (
                    dbus.BasicType(dbus.TYPE.STRING),
                    dbus.BasicType(dbus.TYPE.OBJECT_PATH),
                    dbus.BasicType(dbus.TYPE.SIGNATURE),
                )
            for s in sig
          )
    ) :
        argobjs = args
    else :
        raise TypeError("non-string args require --json option")
    #end if
else :
    argobjs = list(sig[i].validate(json.loads(args[i])) for i in range(len(sig)))
#end if
message.append_objects(sig, *argobjs)
reply = loop.run_until_complete \
  (
    conn.send_await_reply(message)
  )
sys.stdout.write(repr(reply.all_objects) + "\n")
